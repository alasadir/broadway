top_model_res<-residuals(top_model) %>%
as.data.frame(top_model_res)
top_model_res <- as.data.frame(top_model_res)
top_model_res
top_model_pred
plot(top_model_res)
broom::augment(top_model)
broom::tidy(top_model_pred)
broom::tidy(top_model)
plot(top_model_pred)
# top model results
top_model_results <- cbind(top_model_pred, ham_lion_test$top_ticket_price)
ham_lion__test  <-  rsample::testing(ham_lion_split)
# top model results
top_model_results <- cbind(top_model_pred, ham_lion_test$top_ticket_price)
View(ham_lion__test)
View(ham_lion__test)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(broom)
library(huxtable)
library(tidymodels)
grosses <- read_csv(here::here("inputs/data/grosses.csv"),
guess_max = 40000)
hamilton_and_lion_king <-
grosses %>%
filter(show %in% c("Hamilton", "The Lion King"))
hamilton_and_lion_king <-
hamilton_and_lion_king %>%
mutate(show = as_factor(show))
#checking the data type for 'show' to make sure changes were made
class(hamilton_and_lion_king$show)
#checking the order of the shows within the column. This will help determine which show will be taken as a dependent variable in the lm() model
levels(hamilton_and_lion_king$show)
# Selecting model variables
model_data <- hamilton_and_lion_king %>%
select(top_ticket_price,
avg_ticket_price,
seats_sold,
show)
# Checking summary statistics
summary(model_data)
# Checking dataset dimensions
dim(model_data)
# Plotting variables
plot(model_data)
# Splitting data into training and testing sets
set.seed(2)
ham_lion_split <- rsample::initial_split(model_data, prop = 0.80)
ham_lion_split
ham_lion_train <- rsample::training(ham_lion_split)
ham_lion__test  <-  rsample::testing(ham_lion_split)
top_model <- lm(top_ticket_price ~., data = ham_lion_train)
summary(top_model)
# modeling the test samples
top_model_pred <- predict(top_model, ham_lion__test)
# top model results
top_model_results <- cbind(top_model_pred, ham_lion_test$top_ticket_price)
# top model results
top_model_results <- cbind(top_model_pred, top_ticket_price)
?cbind()
?zip()
# viewing models side-by-side
huxreg(top_model, top_model_pred)
# modeling the test samples
top_model_pred <- predict(top_model, ham_lion__test)
plot(top_model_pred)
#plotting
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
#plotting
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
#plotting
hamilton_and_lion_king %>%
ggplot(aes(x = seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
#plotting
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(broom)
library(performance)
library(see)
library(qqplotr)
library(huxtable)
library(tidymodels)
library(forecast)
library(xts)
grosses <- read_csv(here::here("inputs/data/grosses.csv"),
guess_max = 40000)
hamilton_and_lion_king <-
grosses %>%
filter(show %in% c("Hamilton", "The Lion King"))
head(hamilton_and_lion_king, 1) %>%
knitr::kable(caption = "", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE, latex_options = "scale_down")
colnames(hamilton_and_lion_king)
summary(hamilton_and_lion_king) %>%
knitr::kable(caption = "Dataset Summary", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE)
sum(is.na(hamilton_and_lion_king))
hamilton_and_lion_king %>%
ggplot(aes(x = week_ending, y = weekly_gross/1000000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (in millions)") +
xlab("") +
theme_minimal()
hamilton_and_lion_king %>%
mutate(performances = as.integer(performances)) %>%
ggplot(aes(x = week_ending, y = performances)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Number of Performances") +
xlab("") +
theme_minimal()
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, y = seats_sold)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Seats Sold per Week") +
xlab("Average Ticket Price (USD)") +
theme_minimal()
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, y = pct_capacity*100)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Theatre Capacity (%)") +
xlab("Average Ticket Price (USD)") +
theme_minimal()
hamilton_and_lion_king %>%
ggplot(aes(x = week_ending, y = avg_ticket_price)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Average Ticket Price (USD)") +
xlab("") +
theme_minimal()
hamilton_and_lion_king %>%
ggplot(aes(x = week_ending, y = top_ticket_price)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Top Ticket Price (USD)") +
xlab("") +
theme_minimal()
hamilton_and_lion_king %>%
mutate(year_of_show = lubridate::year(week_ending)) %>%
filter(year_of_show %in% c("2015", "2016", "2017", "2018", "2019", "2020")) %>%
ggplot(aes(x = avg_ticket_price, y = top_ticket_price)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Top Ticket Price (USD)") +
xlab("Average Ticket Price (USD)") +
theme_minimal() +
facet_wrap(vars(year_of_show))
#since 'show' contains binary data, Lion King & Hamilton, it is considered as categorical data and should be converted to a factor
hamilton_and_lion_king <-
hamilton_and_lion_king %>%
mutate(show = as_factor(show))
#checking the data type for 'show' to make sure changes were made
class(hamilton_and_lion_king$show)
#checking the order of the shows within the column. This will help determine which show will be taken as a dependent variable in the lm() model
levels(hamilton_and_lion_king$show)
model_data <- hamilton_and_lion_king %>%
select(top_ticket_price,
avg_ticket_price,
seats_sold,
show)
summary(model_data)
dim(model_data)
plot(model_data)
top_model <- lm(formula = top_ticket_price ~
avg_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(top_model)
avg_model <- lm(formula = avg_ticket_price ~
top_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(avg_model)
seats_model <- lm(formula = seats_sold ~
top_ticket_price +
avg_ticket_price +
show,
data = hamilton_and_lion_king)
summary(seats_model)
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
#plot(model)
broom::tidy(top_model)
plot(broom::tidy(top_model))
broom::glance(top_model)
broom::augment(top_model)
ggplot(top_model,
aes(x = .resid)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "Number of occurrences",
x = "Residuals")
huxreg(top_model, avg_model, seats_model)
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, y = top_ticket_price)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Top Ticket Price (USD)") +
xlab("Average Ticket Price (USD)") +
theme_minimal()
hamilton_and_lion_king %>%
mutate(year_of_show = lubridate::year(week_ending)) %>%
ggplot(aes(x = avg_ticket_price, y = top_ticket_price)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Top Ticket Price (USD)") +
xlab("Average Ticket Price (USD)") +
theme_minimal() +
facet_wrap(vars(year_of_show))
hamilton_and_lion_king %>%
ggplot(aes(x = top_ticket_price, seats_sold, y = avg_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Top Ticket Price (USD) + Seats Sold",
y = "Average Ticket Price (USD)",
color = "Show") +
theme_classic()
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
broom::tidy(top_model)
plot(broom::tidy(top_model))
broom::glance(top_model)
broom::glance(top_model) %>%
knitr::kable()
broom::glance(top_model) %>%
knitr::kable(caption = "Model Diagnostics", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE, latex_options = "scale_down")
broom::augment(top_model)
plot(broom::augment(top_model))
broom::augment(top_model)
top_model_residuals <- broom::augment(top_model)
broom::augment(top_model)
ggplot(top_model,
aes(x = .resid)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "Number of occurrences",
x = "Residuals")
broom::tidy(avg_model)
plot(broom::tidy(avg_model))
plot(broom::tidy(avg_model))
broom::glance(avg_model) %>%
knitr::kable(caption = "Model Diagnostics", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE, latex_options = "scale_down")
broom::glance(avg_model) %>%
knitr::kable(caption = "Avg Model Diagnostics", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE, latex_options = "scale_down")
broom::glance(top_model) %>%
knitr::kable(caption = "Top Model Diagnostics", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE, latex_options = "scale_down")
broom::augment(avg_model)
ggplot(avg_model,
aes(x = .resid)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "Number of occurrences",
x = "Residuals")
huxreg(top_model, avg_model, seats_model)
huxreg(top_model, avg_model)
#checking the data type for 'show' to make sure changes were made
class(hamilton_and_lion_king$show)
top_model_ce <- broom::tidy(top_model)
ggplot(top_model_ce,
aes(x = .resid)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "",
x = "")
top_model_ce <- broom::tidy(top_model)
View(top_model_ce)
ggplot(top_model_ce,
aes(x = ., y= estimate)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "",
x = "")
ggplot(top_model_ce,
aes(x = "Intercept", y= estimate)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "",
x = "")
ggplot(top_model_ce,
aes(x = (Intercept), y= estimate)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "",
x = "")
ggplot(top_model_ce,
aes(x = avg_ticket_price, seats_sold, y= top_ticket_price)) +
geom_abline(intercept = (intercept)) +
theme_classic() +
labs(y = "",
x = "")
ggplot(top_model_ce,
aes(x = avg_ticket_price, seats_sold, y= top_ticket_price)) +
geom_abline(intercept = ('intercept')) +
theme_classic() +
labs(y = "",
x = "")
ggplot(top_model_ce,
aes(x = avg_ticket_price, seats_sold, y= top_ticket_price)) +
geom_abline(intercept = TRUE) +
theme_classic() +
labs(y = "",
x = "")
broom::tidy(top_model)
plot(broom::tidy(top_model))
top_model_ce <- broom::tidy(top_model)
plot(top_model_ce$estimate)
ggplot(top_model_ce,
aes(x = .index, y= top_ticket_price)) +
geom_abline(intercept = TRUE) +
theme_classic() +
labs(y = "",
x = "")
ggplot(top_model_ce,
aes(x = .index, y= top_ticket_price)) +
geom_abline(intercept = TRUE) +
theme_classic() +
labs(y = "Top Ticket Price",
x = "")
ggplot(top_model_ce,
aes(x = .index, y= top_ticket_price)) +
geom_point() +
geom_abline(intercept = TRUE) +
theme_classic() +
labs(y = "Top Ticket Price",
x = "")
ggplot(top_model_ce,
aes(x = .index, y= avg_ticket_price)) +
geom_point() +
geom_abline(intercept = TRUE) +
theme_classic() +
labs(y = "Top Ticket Price",
x = "")
top_model_ce <- broom::tidy(top_model) %>%
knitr::kable() %>%
kableExtra::kable_styling()
top_model_ce
top_model_ce <- broom::tidy(top_model) %>%
knitr::kable(digits = 2) %>%
kableExtra::kable_styling()
top_model_ce
top_model_ce <- broom::tidy(top_model) %>%
knitr::kable(fig.cap = "Top Model Coefficient Estimates", digits = 2) %>%
kableExtra::kable_styling()
top_model_ce
top_model_ce <- broom::tidy(top_model) %>%
knitr::kable(caption = "Top Model Coefficient Estimates", digits = 2) %>%
kableExtra::kable_styling()
top_model_ce
avg_model_ce <- broom::tidy(avg_model) %>%
knitr::kable(caption = "Avg Model Coefficient Estimates", digits = 2) %>%
kableExtra::kable_styling()
top_model_ce
plot(broom::tidy(avg_model))
plot(broom::tidy(avg_model))
broom::augment(top_model)
avg_model <- lm(formula = avg_ticket_price ~
top_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(avg_model)
#since 'show' contains binary data, Lion King & Hamilton, it is considered as categorical data and should be converted to a factor
hamilton_and_lion_king <-
hamilton_and_lion_king %>%
mutate(show = as_factor(show))
#checking the data type for 'show' to make sure changes were made
class(hamilton_and_lion_king$show)
#checking the data type for 'show' to make sure changes were made
class(hamilton_and_lion_king$show)
#checking the order of the shows within the column. This will help determine which show will be taken as a dependent variable in the lm() model
levels(hamilton_and_lion_king$show)
#checking the order of the shows within the column. This will help determine which show will be taken as a dependent variable in the lm() model
levels(hamilton_and_lion_king$show)
hamilton_and_lion_king %>%
ggplot(aes(x = top_ticket_price, seats_sold, y = avg_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Top Ticket Price (USD) + Seats Sold",
y = "Average Ticket Price (USD)",
color = "Show") +
theme_classic()
broom::augment(top_model)
glance(top_model)
tidy(top_model)
?set.seed()
set.seed(1407)
top_model_intervals <-
reg_intervals(top_ticket_price ~ avg_ticket_price + seats_sold + show,
data = model_data,
model_fn = "glm",
family = binomial)
?reg_intervals()
top_model_intervals <-
reg_intervals(top_ticket_price ~ avg_ticket_price + seats_sold + show,
data = model_data,
model_fn = "lm")
top_model_intervals
top_model_intervals <-
reg_intervals(top_ticket_price ~ avg_ticket_price + seats_sold + show,
data = model_data,
keep_reps = TRUE,
model_fn = "lm")
top_model_intervals
top_model_intervals%>%
select(term, .replicates) %>%
unnest(cols = .replicates) %>%
ggplot(aes(x = estimate)) +
geom_histogram(bins = 30) +
facet_wrap(~ term, scales = "free_x") +
geom_vline(data = lr_int, aes(xintercept = .lower), col = "red") +
geom_vline(data = lr_int, aes(xintercept = .upper), col = "red") +
geom_vline(xintercept = 0, col = "green")
top_model_intervals%>%
select(term, .replicates) %>%
unnest(cols = .replicates) %>%
ggplot(aes(x = estimate)) +
geom_histogram(bins = 30) +
facet_wrap(~ term, scales = "free_x") +
geom_vline(data = model_data, aes(xintercept = .lower), col = "red") +
geom_vline(data = model_data, aes(xintercept = .upper), col = "red") +
geom_vline(xintercept = 0, col = "green")
library(rsample)
top_model_intervals%>%
select(term, .replicates) %>%
unnest(cols = .replicates) %>%
ggplot(aes(x = estimate)) +
geom_histogram(bins = 30) +
facet_wrap(~ term, scales = "free_x") +
geom_vline(data = model_data, aes(xintercept = .lower), col = "red") +
geom_vline(data = model_data, aes(xintercept = .upper), col = "red") +
geom_vline(xintercept = 0, col = "green")
top_model_intervals%>%
select(term, .replicates) %>%
unnest(cols = .replicates) %>%
ggplot(aes(x = estimate)) +
geom_histogram(bins = 30) +
facet_wrap(~ term, scales = "free_x") +
geom_vline(data = top_model_intervals, aes(xintercept = .lower), col = "red") +
geom_vline(data = top_model_intervals, aes(xintercept = .upper), col = "red") +
geom_vline(xintercept = 0, col = "green")
broom::glance(avg_model)
broom::glance(avg_model)
avg_model_ce <- broom::tidy(avg_model)
broom::tidy(avg_model)
broom::tidy(avg_model)
avg_model_intervals <-
reg_intervals(avg_ticket_price ~ top_ticket_price + seats_sold + show,
data = model_data,
keep_reps = TRUE,
model_fn = "lm")
avg_model_intervals
avg_model_intervals%>%
select(term, .replicates) %>%
unnest(cols = .replicates) %>%
ggplot(aes(x = estimate)) +
geom_histogram(bins = 30) +
facet_wrap(~ term, scales = "free_x") +
geom_vline(data = avg_model_intervals, aes(xintercept = .lower), col = "red") +
geom_vline(data = avg_model_intervals, aes(xintercept = .upper), col = "red") +
geom_vline(xintercept = 0, col = "green")
confint(top_model)
confint(top_model)
View(hamilton_and_lion_king)
View(hamilton_and_lion_king)
View(hamilton_and_lion_king)
