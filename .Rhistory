library(huxtable)
library(tidymodels)
grosses <- read_csv(here::here("inputs/data/grosses.csv"),
guess_max = 40000)
hamilton_and_lion_king <-
grosses %>%
filter(show %in% c("Hamilton", "The Lion King"))
ggplot(model,
aes(x = .resid)) +
geom_histogram(binwidth = 1) +
theme_minimal() +
labs(y = "Number of occurrences",
x = "Residuals")
ggplot(model,
aes(x = .resid)) +
geom_histogram(binwidth = 1) +
theme_classic() +
labs(y = "Number of occurrences",
x = "Residuals")
model_data <- hamilton_and_lion_king %>%
select(top_ticket_price,
avg_ticket_price,
seats_sold,
show)
summary(model_data)
dim(model_data)
plot(model_data)
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price * seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
hamilton_and_lion_king %>%
ggplot(aes(x = avg_ticket_price, seats_sold, y = top_ticket_price, color = show)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(x = "Average Ticket Price (USD) + Seats Sold",
y = "Top Ticket Price (USD)",
color = "Show") +
theme_classic()
top_model <- lm(formula = top_ticket_price ~
avg_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(model)
avg_model <- lm(formula = avg_ticket_price ~
top_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(model)
avg_model <- lm(formula = seats_sold ~
top_ticket_price +
avg_ticket_price +
show,
data = hamilton_and_lion_king)
summary(model)
seats_model <- lm(formula = seats_sold ~
top_ticket_price +
avg_ticket_price +
show,
data = hamilton_and_lion_king)
summary(model)
avg_model <- lm(formula = avg_ticket_price ~
top_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(model)
top_model <- lm(formula = top_ticket_price ~
avg_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(model)
seats_model <- lm(formula = seats_sold ~
top_ticket_price +
avg_ticket_price +
show,
data = hamilton_and_lion_king)
summary(model)
huxreg(top_model, avg_model, seats_model)
lion_ham_grosses <- hamilton_and_lion_king %>%
select(week_ending, weekly_gross)
ts(lion_ham_grosses)
lion_ham_ts <- ts(lion_ham_grosses, start = c(1997,10), frequency = 12)
lion_ham_ts
lion_ham_grosses <- hamilton_and_lion_king %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_ham_grosses)
lion_ham_ts <- ts(lion_ham_grosses)
lion_ham_ts
library(forecast)
class(lion_ham_ts)
lion_ham_grosses <- hamilton_and_lion_king %>%
select(week_ending, show, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_ham_grosses)
lion_ham_grosses %>%
ggplot(aes(x = week_ending, y = weekly_gross)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (USD)") +
xlab("") +
theme_minimal()
lion_ham_grosses %>%
ggplot(aes(x = week_ending, y = weekly_gross/1000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (USD)") +
xlab("") +
theme_minimal()
lion_ham_grosses %>%
ggplot(aes(x = week_ending, y = weekly_gross/10000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (USD)") +
xlab("") +
theme_minimal()
lion_ham_grosses %>%
ggplot(aes(x = week_ending, y = weekly_gross/1000000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (USD)") +
xlab("") +
theme_minimal()
lion_ham_grosses %>%
ggplot(aes(x = week_ending, y = weekly_gross/1000000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (in millions)") +
xlab("") +
theme_minimal()
lion_ham_grosses %>%
ggplot(aes(x = week_ending, y = weekly_gross/1000000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (in millions)") +
xlab("") +
theme_minimal()
lion_ham_ts <- ts(lion_ham_grosses)
class(lion_ham_ts)
plot(lion_ham_grosses)
lion_king_ts <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_king_ts)
lion_king_ts <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = year(as.Date(week_ending)),)
head(lion_king_ts)
lion_king_ts <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = year(as.Date(week_ending)),)
head(lion_king_ts)
mutate(week_ending = as.Date(week_ending)
lion_king_ts <- hamilton_and_lion_king %>%
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(broom)
library(performance)
library(see)
library(qqplotr)
library(huxtable)
library(tidymodels)
library(forecast)
grosses <- read_csv(here::here("inputs/data/grosses.csv"),
guess_max = 40000)
hamilton_and_lion_king <-
grosses %>%
filter(show %in% c("Hamilton", "The Lion King"))
lion_ham_grosses <- hamilton_and_lion_king %>%
select(week_ending, show, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_ham_grosses)
lion_ham_ts <- ts(lion_ham_grosses)
class(lion_ham_ts)
lion_king_ts <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_king_ts)
lion_king_data <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_king_data)
lion_king_ts <- ts(lion_king_data, start = c(1998,5), frequency = 12)
head(lion_king_ts)
lion_king_ts <- ts(lion_king_data, start = c(1997), frequency = 8)
head(lion_king_ts)
?ts()
lion_king_ts <- as.ts(lion_king_data)
head(lion_king_ts)
class(lion_king_ts)
lion_king_ts <- ts(lion_king_data[,3])
lion_king_ts <- ts(lion_king_data[,2])
head(lion_king_ts)
lion_king_ts <- ts(lion_king_data[,2], start = c(1997,4), frequency = 4)
head(lion_king_ts)
lion_king_ts <- ts(lion_king_data[,2], start = c(1997,4), frequency = 12)
head(lion_king_ts)
lion_king_ts <- ts(lion_king_data[,2], start = c(1997,10), frequency = 12)
head(lion_king_ts)
head(lion_king_ts, 10)
head(lion_king_ts, 15)
head(lion_king_ts)
head(lion_king_ts, 12)
lion_king_ts
lion_king_data <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = ym(as.Date(week_ending)))
lion_king_data <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = year(as.Date(week_ending)))
head(lion_king_data)
lion_king_data <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = ym(as.Date(week_ending)))
head(lion_king_data)
lion_king_data <- hamilton_and_lion_king %>%
filter(show == 'The Lion King',
week_ending == year('1998' - '2020')) %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
lion_king_data <- hamilton_and_lion_king %>%
filter(show == 'The Lion King') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
head(lion_king_data)
install.packages(xts)
install.packages('xts')
install.packages("xts")
library(xts)
?xts()
head(lion_king_ts)
lion_king_ts <- xts(lion_king_data)
lion_king_ts <- xts(lion_king_data$weekly_gross, lion_king_data$week_ending)
head(lion_king_ts)
hamilton_data <- hamilton_and_lion_king %>%
filter(show == 'Hamilton') %>%
select(week_ending, weekly_gross) %>%
mutate(week_ending = as.Date(week_ending))
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending)
start(hamilton_ts)
end(hamilton_ts)
sum(is.na(hamilton_ts)
sum(is.na(hamilton_ts))
sum(is.na(hamilton_ts))
summary(hamilton_ts)
plot(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency = 12)
start(hamilton_ts)
end(hamilton_ts)
sum(is.na(hamilton_ts))
summary(hamilton_ts)
plot(hamilton_ts)
?decompose()
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts, "multiplicative")
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency = 12)
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts, "multiplicative")
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts, "additive")
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts, "multiplicative")
frequency(hamilton_ts)
head(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency =12)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency=12)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = hamilton_ts$week_ending,frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = hamilton_data$week_ending ,frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = 'hamilton_data$week_ending' ,frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = hamilton_data$week_ending ,frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.POSIXct(hamilton_data$week_ending) ,frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.POSIXct(hamilton_data$week_ending), frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.Date(hamilton_data$week_ending), frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency=12)
?xts()
head(hamilton_ts)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.Date(hamilton_data$week_ending), frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = (hamilton_data$week_ending), frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency=12)
frequency(hamilton_ts)
cycle(hamilton_ts)
head(hamilton_ts)
plot(hamilton_ts)
hamilton_ts <- ts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency=12)
head(hamilton_ts)
frequency(hamilton_ts)
start(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency=12)
frequency(hamilton_ts)
start(hamilton_ts)
hamilton_ts <- hamilton_data %>% xts(weekly_gross, week_ending, frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency=12)
frequency(hamilton_ts)
?frequency()
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = index(hamilton_data$week_ending) frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = index(week_ending) frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = index(hamilton_data$week_ending), frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = index(hamilton_data), frequency=12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending)
head(hamilton_ts)
`frequency<-`(hamilton_ts,12)
frequency(hamilton_ts)
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts`frequency<-`(hamilton_ts,12), "multiplicative")
hamilton_ts_f <- `frequency<-`(hamilton_ts,12)
frequency(hamilton_ts_f)
start(hamilton_ts_f)
start(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, `frequency<-`(hamilton_ts,12))
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.Date(week_ending), frequency = 12))
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.Date(week_ending), frequency = 12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.Date(hamilton_dataweek_ending), frequency = 12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = as.Date(hamilton_data$week_ending), frequency = 12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, unique FALSE, order.by = as.Date(hamilton_data$week_ending), frequency = 12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, unique = FALSE, order.by = as.Date(hamilton_data$week_ending), frequency = 12)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending)
dates <- seq(as.Date("2015-07-19"), length =241 , by = 'weeks')
?seq()
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = dates)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = dates, frequency = 12)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = dates, frequency = 1)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = dates, frequency = 52)
hamilton_ts <- ts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = dates, frequency = 52)
hamilton_ts <- ts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency = 52)
frequency(hamilton_ts)
head(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency = 52)
head(hamilton_ts)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, frequency = 0)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending)
frequency(hamilton_ts)
hamilton_ts <- xts(hamilton_data$weekly_gross, hamilton_data$week_ending, order.by = dates)
frequency(hamilton_ts)
head(hamilton_ts)
head(hamilton_ts,10)
head(hamilton_ts[,'Grosses'],10)
head(hamilton_ts[,1'Grosses'],10)
head(hamilton_ts[,1Grosses],10)
head(hamilton_ts,10)
frequency(hamilton_ts)
plot(hamilton_ts)
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts`frequency<-`(hamilton_ts,12), "multiplicative")
#Decompose the Data Into Four Components
hamilton_ts_decomposed <- decompose(hamilton_ts, "multiplicative")
?ts()
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(broom)
library(performance)
library(see)
library(qqplotr)
library(huxtable)
library(tidymodels)
library(forecast)
library(xts)
grosses <- read_csv(here::here("inputs/data/grosses.csv"),
guess_max = 40000)
hamilton_and_lion_king <-
grosses %>%
filter(show %in% c("Hamilton", "The Lion King"))
sum(is.na(hamilton_and_lion_king))
summary(hamilton_and_lion_king) %>%
knitr::kable(caption = "Dataset Summary", digits = 2) %>%
kableExtra::kable_styling(full_width = FALSE)
hamilton_and_lion_king %>%
ggplot(aes(x = week_ending, y = weekly_gross/1000000)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Weekly Gross (in millions)") +
xlab("") +
theme_minimal()
hamilton_and_lion_king %>%
mutate(performances = as.integer(performances)) %>%
ggplot(aes(x = week_ending, y = performances)) +
geom_point(aes(color = show), alpha = 0.8) +
ylab("Number of Performances") +
xlab("") +
theme_minimal()
cor(hamilton_and_lion_king$seats_sold, hamilton_and_lion_king$avg_ticket_price, method = "pearson")
cor(hamilton_and_lion_king$seats_sold, hamilton_and_lion_king$top_ticket_price, method = "pearson")
cor(hamilton_and_lion_king$top_ticket_price, hamilton_and_lion_king$avg_ticket_price, method = "pearson")
model_data <- hamilton_and_lion_king %>%
select(top_ticket_price,
avg_ticket_price,
seats_sold,
show)
summary(model_data)
dim(model_data)
plot(model_data)
# Splitting data into training and testing sets
set.seed(2)
ham_lion_split <- rsample::initial_split(model_data, prop = 0.80)
ham_lion_split
ham_lion_train <- rsample::training(ham_lion_split)
ham_lion_train <- rsample::training(ham_lion_split)
ham_lion__test  <-  rsample::testing(ham_lion_split)
Model <- lm(top_ticket_price ~., data = ham_lion_train)
Model1 <- lm(top_ticket_price ~., data = ham_lion_train)
summary(Model1)
summary(Model1)
source('~/INF2178 Experimental Design/broadway/scripts/01-get_data.R')
library(tidyverse)
library(lubridate)
library(kableExtra)
library(broom)
library(performance)
library(see)
library(qqplotr)
library(huxtable)
library(tidymodels)
hamilton_and_lion_king <-
hamilton_and_lion_king %>%
mutate(show = as_factor(show))
class(hamilton_and_lion_king$show)
#checking the order of the shows within the column. This will help determine which show will be taken as a dependent variable in the lm() model
levels(hamilton_and_lion_king$show)
model_data <- hamilton_and_lion_king %>%
select(top_ticket_price,
avg_ticket_price,
seats_sold,
show)
summary(model_data)
# Checking dataset dimensions
dim(model_data)
# Plotting variables
plot(model_data)
# Splitting data into training and testing sets
set.seed(2)
ham_lion_split <- rsample::initial_split(model_data, prop = 0.80)
ham_lion_split
ham_lion_train <- rsample::training(ham_lion_split)
ham_lion__test  <-  rsample::testing(ham_lion_split)
top_model <- lm(top_ticket_price ~., data = ham_lion_train)
summary(top_model)
avg_model <- lm(avg_ticket_price ~., data = ham_lion_train)
summary(avg_model)
avg_model <- lm(formula = avg_ticket_price ~
top_ticket_price +
seats_sold +
show,
data = hamilton_and_lion_king)
summary(avg_model)
avg_model <- lm(avg_ticket_price ~., data = ham_lion_train)
summary(avg_model)
# viewing models side-by-side
huxreg(top_model, avg_model)
top_model <-
parsnip::linear_reg() %>%
parsnip::set_engine(engine = "lm") %>%
parsnip::fit(top_ticket_price ~ avg_ticket_price + seats_sold + show,
data = ham_lion_train
)
summary(top_model)
library(rstanarm)
install.packages('rstanarm')
library(rstanarm)
top_model_in_rstanarm <-
stan_lm(
top_ticket_price ~ avg_ticket_price + seats_sold + show,
data = ham_lion_train,
prior = NULL,
seed = 2
)
# modeling
top_model <- lm(top_ticket_price ~., data = ham_lion_train)
summary(top_model)
# modeling the test samples
top_model_pred <- predict(top_model, ham_lion__test)
top_model_pred
# residuals
top_model_res<-residuals(top_model)
# residuals
top_model_res<-residuals(top_model) %>%
as.data.frame(top_model_res)
top_model_res <- as.data.frame(top_model_res)
top_model_res
top_model_pred
plot(top_model_res)
broom::augment(top_model)
broom::tidy(top_model_pred)
broom::tidy(top_model)
plot(top_model_pred)
# top model results
top_model_results <- cbind(top_model_pred, ham_lion_test$top_ticket_price)
ham_lion__test  <-  rsample::testing(ham_lion_split)
# top model results
top_model_results <- cbind(top_model_pred, ham_lion_test$top_ticket_price)
View(ham_lion__test)
View(ham_lion__test)
